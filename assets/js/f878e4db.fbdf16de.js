"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[390],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=d(n),u=r,k=c["".concat(p,".").concat(u)]||c[u]||m[u]||l;return n?a.createElement(k,i(i({ref:t},s),{},{components:n})):a.createElement(k,i({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7032:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:3},i="Events",o={unversionedId:"api/events",id:"api/events",title:"Events",description:"NPM | GitHub",source:"@site/docs/api/events.mdx",sourceDirName:"api",slug:"/api/events",permalink:"/docs/api/events",draft:!1,editUrl:"https://github.com/civet-org/civet-org.github.io/docs/api/events.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Core",permalink:"/docs/api/core"}},p={},d=[{value:"<code>&lt;ConfigProvider&gt;</code>",id:"configprovider",level:2},{value:"Props",id:"props",level:3},{value:"Context",id:"context",level:3},{value:"Related",id:"related",level:3},{value:"<code>&lt;ConfigConsumer&gt;</code>",id:"configconsumer",level:2},{value:"<code>useConfigContext</code>",id:"useconfigcontext",level:2},{value:"<code>&lt;EventHandler&gt;</code>",id:"eventhandler",level:2},{value:"Props",id:"props-1",level:3},{value:"<code>composeHandlers</code>",id:"composehandlers",level:2},{value:"Function arguments",id:"function-arguments",level:3},{value:"Return type",id:"return-type",level:3},{value:"<code>EventReceiver</code>",id:"eventreceiver",level:2},{value:"Class members",id:"class-members",level:3},{value:"Abstract members",id:"abstract-members",level:3},{value:"Caveats",id:"caveats",level:3},{value:"Abstract functions",id:"abstract-functions",level:4},{value:"<code>isEventReceiver</code>",id:"iseventreceiver",level:2},{value:"Function arguments",id:"function-arguments-1",level:3},{value:"Return type",id:"return-type-1",level:3},{value:"<code>eventReceiverPropType</code>",id:"eventreceiverproptype",level:2}],s={toc:d},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"events"},"Events"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://npmjs.com/package/@civet/events"},"NPM")," | ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/civet-org/events"},"GitHub")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @civet/events\n")),(0,r.kt)("p",null,"The events module provides advanced event handling functionality."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"core#datastore"},(0,r.kt)("inlineCode",{parentName:"a"},"DataStore"))," already has basic support for handling events. However, it is limited to updating all subscribers of a specific resource.\nIf you need more advanced event handling, this is the place to go."),(0,r.kt)("h2",{id:"configprovider"},(0,r.kt)("inlineCode",{parentName:"h2"},"<ConfigProvider>")),(0,r.kt)("p",null,"Provides general configuration for event components to its descendants using React's context API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<ConfigProvider eventReceiver={receiver}>...</ConfigProvider>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { ConfigProvider } from "@civet/events";\n')),(0,r.kt)("h3",{id:"props"},"Props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"eventReceiver"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#eventreceiver"},(0,r.kt)("inlineCode",{parentName:"a"},"EventReceiver"))),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"context"},"Context"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"eventReceiver"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#eventreceiver"},(0,r.kt)("inlineCode",{parentName:"a"},"EventReceiver"))),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"related"},"Related"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#configconsumer"},(0,r.kt)("inlineCode",{parentName:"a"},"<ConfigConsumer>")),", ",(0,r.kt)("a",{parentName:"p",href:"#eventhandler"},(0,r.kt)("inlineCode",{parentName:"a"},"<EventHandler>")),", ",(0,r.kt)("a",{parentName:"p",href:"#useconfigcontext"},(0,r.kt)("inlineCode",{parentName:"a"},"useConfigContext"))),(0,r.kt)("h2",{id:"configconsumer"},(0,r.kt)("inlineCode",{parentName:"h2"},"<ConfigConsumer>")),(0,r.kt)("p",null,"Context consumer for ",(0,r.kt)("a",{parentName:"p",href:"#configprovider"},(0,r.kt)("inlineCode",{parentName:"a"},"<ConfigProvider>")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<ConfigConsumer>\n  {(context) => ...}\n</ConfigConsumer>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { ConfigConsumer } from "@civet/events";\n')),(0,r.kt)("h2",{id:"useconfigcontext"},(0,r.kt)("inlineCode",{parentName:"h2"},"useConfigContext")),(0,r.kt)("p",null,"Context hook for ",(0,r.kt)("a",{parentName:"p",href:"#configprovider"},(0,r.kt)("inlineCode",{parentName:"a"},"<ConfigProvider>")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const configContext = useConfigContext();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { useConfigContext } from "@civet/events";\n')),(0,r.kt)("h2",{id:"eventhandler"},(0,r.kt)("inlineCode",{parentName:"h2"},"<EventHandler>")),(0,r.kt)("p",null,"Subscribes to an ",(0,r.kt)("a",{parentName:"p",href:"#eventreceiver"},(0,r.kt)("inlineCode",{parentName:"a"},"EventReceiver"))," to update a ",(0,r.kt)("a",{parentName:"p",href:"core#resource"},(0,r.kt)("inlineCode",{parentName:"a"},"<Resource>"))," when events occur."),(0,r.kt)("p",null,"Necessary configuration that is not directly specified is taken from the nearest ",(0,r.kt)("a",{parentName:"p",href:"#configprovider"},(0,r.kt)("inlineCode",{parentName:"a"},"<ConfigProvider>"))," and ",(0,r.kt)("a",{parentName:"p",href:"core#resource"},(0,r.kt)("inlineCode",{parentName:"a"},"<Resource>")),"."),(0,r.kt)("p",null,"You can specify which events should lead to an update by either passing ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," to the ",(0,r.kt)("a",{parentName:"p",href:"#eventreceiver"},(0,r.kt)("inlineCode",{parentName:"a"},"EventReceiver"))," or using ",(0,r.kt)("inlineCode",{parentName:"p"},"onEvent"),".\n",(0,r.kt)("inlineCode",{parentName:"p"},"onEvent")," can also be used to directly access events allowing you to add custom event logic to your components."),(0,r.kt)("p",null,"Additionally, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"onNotify")," which is called when the ",(0,r.kt)("a",{parentName:"p",href:"core#resource"},(0,r.kt)("inlineCode",{parentName:"a"},"<Resource>"))," has been asked to update and allows you to get all events that have lead to the update at once as well as the request and revision for the update."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<EventHandler\n  options={{ some: "options" }}\n  onEvent={(e) => console.log("Received", e)}\n>\n  ...\n</Resource>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { EventHandler } from "@civet/events";\n')),(0,r.kt)("h3",{id:"props-1"},"Props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"eventReceiver"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#eventreceiver"},(0,r.kt)("inlineCode",{parentName:"a"},"EventReceiver"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#eventreceiver"},(0,r.kt)("inlineCode",{parentName:"a"},"EventReceiver"))," to be used")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"core#resourceprovider"},"Resource context")," to be used")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"options"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#eventreceiver"},(0,r.kt)("inlineCode",{parentName:"a"},"EventReceiver"))," options")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onEvent"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(event: any) => boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Callback to filter events and handle your own event logic - if ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," is returned, the event is considered as handled and the resource is not update")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onNotify"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"({ request: string, revision: string }, events: any[]) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"Informs when the ",(0,r.kt)("a",{parentName:"td",href:"core#resource"},(0,r.kt)("inlineCode",{parentName:"a"},"<Resource>"))," has been requested to update")))),(0,r.kt)("h2",{id:"composehandlers"},(0,r.kt)("inlineCode",{parentName:"h2"},"composeHandlers")),(0,r.kt)("p",null,"Utility for composing multiple event handlers.\nInvokes each handler from left to right, but stops immediately when a handler returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const composedHandler = composeHandlers(\n  (event) => console.log('Received', event),\n  (event) => ...\n);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { composeHandlers } from "@civet/events";\n')),(0,r.kt)("h3",{id:"function-arguments"},"Function arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"...handlers"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(event: any) => boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Event handlers")))),(0,r.kt)("h3",{id:"return-type"},"Return type"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(event: any) => boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Composed handlers")))),(0,r.kt)("h2",{id:"eventreceiver"},(0,r.kt)("inlineCode",{parentName:"h2"},"EventReceiver")),(0,r.kt)("p",null,"EventReceiver base class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class CustomReceiver extends EventReceiver {\n  handleSubscribe(resource, options, handler) {\n    ...\n    const unsubscribe = () => {\n      ...\n    };\n    return unsubscribe;\n  }\n}\n\nconst receiver = new CustomReceiver();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { EventReceiver } from "@civet/events";\n')),(0,r.kt)("h3",{id:"class-members"},"Class members"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Arguments"),(0,r.kt)("th",{parentName:"tr",align:null},"Return Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"subscribe"),(0,r.kt)("td",{parentName:"tr",align:null},"resource: ",(0,r.kt)("inlineCode",{parentName:"td"},"object"),", options: ",(0,r.kt)("inlineCode",{parentName:"td"},"object"),", handler: ",(0,r.kt)("inlineCode",{parentName:"td"},"(events: any[]) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"unsubscribe: ",(0,r.kt)("inlineCode",{parentName:"td"},"() => void")),(0,r.kt)("td",{parentName:"tr",align:null},"Subscribe to events")))),(0,r.kt)("h3",{id:"abstract-members"},"Abstract members"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Arguments"),(0,r.kt)("th",{parentName:"tr",align:null},"Return Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"handleSubscribe"),(0,r.kt)("td",{parentName:"tr",align:null},"resource: ",(0,r.kt)("inlineCode",{parentName:"td"},"object"),", options: ",(0,r.kt)("inlineCode",{parentName:"td"},"object"),", handler: ",(0,r.kt)("inlineCode",{parentName:"td"},"(events: any[]) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"unsubscribe: ",(0,r.kt)("inlineCode",{parentName:"td"},"() => void")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"caveats"},"Caveats"),(0,r.kt)("h4",{id:"abstract-functions"},"Abstract functions"),(0,r.kt)("p",null,"The function ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe")," internally invokes its abstract counterpart ",(0,r.kt)("inlineCode",{parentName:"p"},"handleSubscribe")," and performs generic validation on its parameters and return value. Therefore, you should not just override it, but implement the abstract ",(0,r.kt)("inlineCode",{parentName:"p"},"handleSubscribe")," method instead."),(0,r.kt)("h2",{id:"iseventreceiver"},(0,r.kt)("inlineCode",{parentName:"h2"},"isEventReceiver")),(0,r.kt)("p",null,"Identifies ",(0,r.kt)("a",{parentName:"p",href:"#eventreceiver"},(0,r.kt)("inlineCode",{parentName:"a"},"EventReceiver"))," instances."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const er = new EventReceiver();\n\nif (!isEventReceiver(er)) {\n  throw new Error("Should be a EventReceiver instance");\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { isEventReceiver } from "@civet/events";\n')),(0,r.kt)("h3",{id:"function-arguments-1"},"Function arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"eventReceiver"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"any")),(0,r.kt)("td",{parentName:"tr",align:null},"The object to be checked")))),(0,r.kt)("h3",{id:"return-type-1"},"Return type"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether ",(0,r.kt)("inlineCode",{parentName:"td"},"eventReceiver")," is an instance of ",(0,r.kt)("a",{parentName:"td",href:"#eventreceiver"},(0,r.kt)("inlineCode",{parentName:"a"},"EventReceiver")))))),(0,r.kt)("h2",{id:"eventreceiverproptype"},(0,r.kt)("inlineCode",{parentName:"h2"},"eventReceiverPropType")),(0,r.kt)("p",null,"PropType for ",(0,r.kt)("a",{parentName:"p",href:"#eventreceiver"},(0,r.kt)("inlineCode",{parentName:"a"},"EventReceiver"))," instances."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const propTypes = {\n  optional: eventReceiverPropType,\n  required: eventReceiverPropType.isRequired,\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { eventReceiverPropType } from "@civet/events";\n')))}m.isMDXComponent=!0}}]);